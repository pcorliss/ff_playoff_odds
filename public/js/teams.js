// Generated by CoffeeScript 1.7.1
(function() {
  var Match, Ranker, Team;

  Team = (function() {
    function Team(id, owner, name) {
      this.id = id;
      this.owner = owner;
      this.name = name;
      this.matches = [];
    }

    Team.prototype.my_score = function(match) {
      if (match.a_team.id === this.id) {
        return match.a_points;
      } else {
        return match.b_points;
      }
    };

    Team.prototype.real_scores = function() {
      var match, _i, _len, _ref, _results;
      _ref = this.real_matches();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        match = _ref[_i];
        _results.push(this.my_score(match));
      }
      return _results;
    };

    Team.prototype.real_matches = function() {
      var match, _i, _len, _ref, _results;
      _ref = this.matches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        match = _ref[_i];
        if (!match.computed()) {
          _results.push(match);
        }
      }
      return _results;
    };

    Team.prototype.fake_matches = function() {
      var match, _i, _len, _ref, _results;
      _ref = this.matches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        match = _ref[_i];
        if (match.computed()) {
          _results.push(match);
        }
      }
      return _results;
    };

    Team.prototype.fake_score = function() {
      this.scores || (this.scores = this.real_scores());
      this.mean || (this.mean = scores.mean());
      this.stddev || (this.stddev = scores.stanDeviate());
      this.distribution || (this.distribution = gaussian(mean, stddev * stddev));
      return this.distribution.ppf(Math.random());
    };

    Team.prototype.ties = function() {
      return this.record()[2];
    };

    Team.prototype.losses = function() {
      return this.record()[1];
    };

    Team.prototype.wins = function() {
      return this.record()[0];
    };

    Team.prototype.record = function() {
      var a, b, loss, match, tie, tmp, win, _i, _len, _ref;
      if (this.record) {
        return this.record;
      }
      win = 0;
      loss = 0;
      tie = 0;
      _ref = this.matches;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        match = _ref[_i];
        if (!(match.complete())) {
          continue;
        }
        a = match.a_points;
        b = match.b_points;
        if (match.a_team.id !== this.id) {
          tmp = a;
          a = b;
          b = tmp;
        }
        if (a > b) {
          win += 1;
        } else if (b > a) {
          loss += 1;
        } else {
          tie += 1;
        }
      }
      return this.record = [win, loss, tie];
    };

    Team.prototype.points_for = function() {
      var match;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.matches;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          match = _ref[_i];
          _results.push(this.my_score(match));
        }
        return _results;
      }).call(this)).reduce(function(t, s) {
        return t + s;
      });
    };

    return Team;

  })();

  Match = (function() {
    function Match(week, a_team, b_team, a_points, b_points) {
      this.week = week;
      this.a_team = a_team;
      this.b_team = b_team;
      this.a_points = a_points;
      this.b_points = b_points;
      this.computed = this.incomplete();
    }

    Match.prototype.complete = function() {
      return this.a_points !== 0 && this.b_points !== 0;
    };

    Match.prototype.incomplete = function() {
      return !this.complete();
    };

    return Match;

  })();

  Ranker = (function() {
    function Ranker(iterations, playoff_spots, bye_week_spots, scores) {
      load(scores);
    }

    Ranker.prototype.load = function(scores) {
      var match, week, _i, _len, _results;
      this.teams = [];
      _results = [];
      for (_i = 0, _len = scores.length; _i < _len; _i++) {
        week = scores[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = week.length; _j < _len1; _j++) {
            match = week[_j];
            _results1.push(bar());
          }
          return _results1;
        })());
      }
      return _results;
    };

    Ranker.prototype.compute = function() {
      var match, _i, _len, _ref, _results;
      _ref = this.matches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        match = _ref[_i];
        if (!(match.incomplete())) {
          continue;
        }
        match.a_points = match.a_team.fake_score();
        _results.push(match.b_points = match.b_team.fake_score());
      }
      return _results;
    };

    Ranker.prototype.reset = function() {
      var match, _i, _len, _ref, _results;
      _ref = this.matches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        match = _ref[_i];
        if (!(match.computed())) {
          continue;
        }
        match.a_points = 0;
        _results.push(match.b_points = 0);
      }
      return _results;
    };

    return Ranker;

  })();

}).call(this);
